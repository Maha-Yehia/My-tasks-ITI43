@using RazorComponents_Library.Definitions;
@typeparam TItem

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="notification is-danger">
        <button class="delete" @onclick="@(() => { this.ErrorMessage = string.Empty; })"></button>
        @ErrorMessage
    </div>
}
else
{
    <div>
        <table class="table is-fullwidth is-bordered is-striped">
            <thead>
                <tr>
                    @if (Columns == null || Columns.Count <= 0)
                    {
                        // Create the header using reflection
                    }
                    else
                    {
                        // Create the header based on columns definition
                        foreach (var column in Columns)
                        {
                            <th class="@(AlignmentClass(column))" @onclick="@(()=> SortData(column))">
                                @column.Caption
                                <span style="float:right" class="@(SortClass(column))"></span>
                            </th>

                        }
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPage)).Take(Paging.NumOfItemsPerPage(DataItems.Count())))
                {
                    <tr>
                        @foreach (var column in Columns)
                        {
                            @if (column.Alignment != Alignment.NotSet)
                            {
                                <td align="@column.Alignment.ToString().ToLower()">@FormatItemValue(item, column)</td>
                            }
                            else
                            {
                                <td>@FormatItemValue(item, column)</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
        <div class="level">
            <div class="level-left"></div>
            <div class="level-right">
                <div class="level-item">
                    @if (Paging != null && Paging.Enabled)
                    {
                        @if (Paging.CustomPager)
                        {
                            @CustomPager
                        }
                        else
                        {
                            <span style="font-size: 14px; cursor: pointer" @onclick="GoToPrevPage"><b>&lt; Previous</b></span>
                            <span style="font-size: 12px; color: gray">&nbsp;&nbsp;Page @CurrentPage of @Paging.MaxPageNumber(DataItems.Count)&nbsp;&nbsp;</span>
                            <span style="font-size: 14px; cursor: pointer" @onclick="GoToNextPage"><b>Next &gt;</b></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; } = new PagingConfig();

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private string ErrorMessage;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ValidateDefinitions();

        SortData();
    }

    private void ValidateDefinitions()
    {
        this.ErrorMessage = string.Empty;

        if (DataItems == null || DataItems.Count <= 0)
        {
            ErrorMessage = "DataItems is not provided.";
            return;
        }

        var itemProperties = typeof(TItem).GetProperties();
        if (Columns != null && (itemProperties == null || itemProperties.Count() != Columns.Count))
        {
            ErrorMessage = "Column definitions don't match the provided data.";
            return;
        }

        if (Columns.Count(x => x.SortDirection != SortDirection.NotSet) > 1)
        {
            ErrorMessage = "Sorting on multiple columns are not supported.";
            return;
        }
    }

    private void SortData(ColumnDefinition sortByColumn = null)
    {
        if (sortByColumn == null) sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
        if (sortByColumn == null) return;

        foreach (var column in Columns)
        {
            if (column.DataField != sortByColumn.DataField) column.SortDirection = SortDirection.NotSet;
        }

        switch (sortByColumn.SortDirection)
        {
            case SortDirection.NotSet:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            case SortDirection.Asc:
                sortByColumn.SortDirection = SortDirection.Desc;
                break;
            case SortDirection.Desc:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
            default:
                sortByColumn.SortDirection = SortDirection.Asc;
                break;
        }

        if (sortByColumn.SortDirection == SortDirection.Asc)
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString()
                .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString()));
        }
        else
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString()
                .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString()));
        }

    }

    public void GoToPrevPage()
    {
        CurrentPage = Paging.PrevPageNumber(CurrentPage);
    }

    public void GoToNextPage()
    {
        CurrentPage = Paging.NextPageNumber(CurrentPage, DataItems.Count);
    }

    public int MaxPageNumber { get => Paging.MaxPageNumber(DataItems.Count); }

    #region Html Markup Cleanup

    private string SortClass(ColumnDefinition column)
    {
        if (column.SortDirection != SortDirection.NotSet)
        {
            return $"sort {column.SortDirection.ToString().ToLower()}";
        }

        return "no-sort";
    }

    private string AlignmentClass(ColumnDefinition column)
    {
        string alignmentClass = string.Empty;

        switch (column.Alignment)
        {
            case Alignment.Left:
                alignmentClass = "align-left";
                break;
            case Alignment.Center:
                alignmentClass = "align-center";
                break;
            case Alignment.Right:
                alignmentClass = "align-right";
                break;
            case Alignment.NotSet:
            default:
                alignmentClass = string.Empty;
                break;
        }

        return alignmentClass;
    }

    private string FormatItemValue(TItem item, ColumnDefinition column)
    {
        string value = string.Empty;

        if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
        {
            switch (column.DataType)
            {
                case DataType.Date:
                case DataType.DateTime:
                    value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                    break;
                case DataType.Boolean:
                    value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                    break;
                case DataType.Currency:
                    value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                    break;
                default:
                    break;
            }
        }
        else
        {
            return typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString();
        }

        return value;
    }

    #endregion
}
